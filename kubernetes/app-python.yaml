apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-python-v1
spec:
  replicas: 4
  selector:
    matchLabels:
      app.kubernetes.io/name: app-python
  template:
    metadata:
      name: app-python
      labels:
        app.kubernetes.io/name: app-python
    spec:
      containers:
        - name: app-python 
          image: yaalexf/app-python
          imagePullPolicy: Always
          resources:
            requests:
              memory: "52Mi"
              cpu: "20m"
            limits:
              memory: "64Mi"
              cpu: "50m"
          env:
            - name: DD_AGENT_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: DD_SERVICE
              value: "app-python"
            - name: DD_VERSION
              value: "0.1"
            - name: DD_PROFILING_ENABLED
              value: "true"
            - name: DD_LOGS_INJECTION
              value: "true"
            - name: DD_RUNTIME_METRICS_ENABLED
              value: "true"
            - name: APP_CLIENT_TOKEN
              valueFrom:
                secretKeyRef:
                  name: app-python
                  key: clientToken
            - name: APP_APPLICATION_ID
              valueFrom:
                secretKeyRef:
                  name: app-python
                  key: applicationId
            - name: APP_SITE
              valueFrom:
                secretKeyRef:
                  name: app-python
                  key: site
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-python-v2
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: app-python
  template:
    metadata:
      name: app-python
      labels:
        app.kubernetes.io/name: app-python
        tags.datadoghq.com/service: app-python
        tags.datadoghq.com/version: "0.2"
    spec:
      containers:
        - name: app-python 
          image: yaalexf/app-python
          imagePullPolicy: Always
          resources:
            requests:
              memory: "52Mi"
              cpu: "20m"
            limits:
              memory: "64Mi"
              cpu: "50m"
          env:
            - name: DD_PROFILING_ENABLED
              value: "true"
            - name: DD_LOGS_INJECTION
              value: "true"
            - name: DD_RUNTIME_METRICS_ENABLED
              value: "true"
            - name: DD_CLIENT_TOKEN
              valueFrom:
                secretKeyRef:
                  name: app-python
                  key: clientToken
            - name: DD_APPLICATION_ID
              valueFrom:
                secretKeyRef:
                  name: app-python
                  key: applicationId
            - name: DD_SITE
              valueFrom:
                secretKeyRef:
                  name: app-python
                  key: site
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq-consumer
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: rabbitmq-consumer
  template:
    metadata:
      name: rabbitmq-consumer
      labels:
        app.kubernetes.io/name: rabbitmq-consumer
        tags.datadoghq.com/service: rabbitmq-consumer
        tags.datadoghq.com/version: "0.1"
    spec:
      containers:
        - name: rabbitmq-consumer
          image: yaalexf/app-python
          imagePullPolicy: Always
          command:
            - ddtrace-run
            - python3
            - rabbitmq-consumer.py
          resources:
            requests:
              memory: "48Mi"
              cpu: "20m"
            limits:
              memory: "64Mi"
              cpu: "50m"
          env:
            - name: DD_PROFILING_ENABLED
              value: "true"
            - name: DD_LOGS_INJECTION
              value: "true"
            - name: DD_RUNTIME_METRICS_ENABLED
              value: "true"
---
kind: Service
apiVersion: v1
metadata:
  labels:
    app: app-python
  name: app-python
spec:
  type: NodePort
  selector:
    app.kubernetes.io/name: app-python
  ports:
    - name: http
      port: 80
      targetPort: 80
      nodePort: 30080
